// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    url      = env("DATABASE_URL")
}

model Notification {
    id        String    @id @default(cuid())
    createdAt DateTime  @default(now())
    message   String
    userId    String
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    viewedOn  DateTime?
    deleted   Boolean?  @default(false)
    deletedAt DateTime?
}

model Profile {
    id           String                 @id @default(cuid())
    createdAt    DateTime               @default(now())
    updatedAt    DateTime               @updatedAt
    name         String
    wokspace     Workspace              @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId  String
    active       Boolean                @default(true)
    type         PROFILE_TYPES
    appointments ContactOnAppointment[]
    contact      Contact                @relation(fields: [contactId], references: [id], onDelete: Cascade)
    contactId    String
    notes        String?
    deleted      Boolean?               @default(false)
    deletedAt    DateTime?
    createdBy    User                   @relation(fields: [createdById], references: [id])
    createdById  String
    metafFields  Json?
}

model ContactOnAppointment {
    id            String      @id @default(cuid())
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
    createdBy     User        @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById   String
    contact       Contact     @relation(fields: [contactId], references: [id], onDelete: Cascade)
    contactId     String
    appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
    appointmentId String
    deleted       Boolean?    @default(false)
    deletedAt     DateTime?
    profile       Profile?    @relation(fields: [profileId], references: [id])
    profileId     String?
}

model Appointment {
    id           String                 @id @default(cuid())
    createdAt    DateTime               @default(now())
    updatedAt    DateTime               @updatedAt
    workspace    Workspace              @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId  String
    createdBy    User                   @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById  String
    date         String
    status       AppointmentStatus      @default(NO_STATUS)
    startTime    String?
    endTime      String?
    tags         Tag[]
    contacts     ContactOnAppointment[]
    address      String
    address_2    String?
    latitude     Float?
    longitude    Float?
    note         String?
    assignedTo   UserOnWorkspace?       @relation(fields: [assignedToId], references: [id])
    assignedToId String?
    deleted      Boolean?               @default(false)
    deletedAt    DateTime?
    // If user decideds to reorder to the appointments in a list. Default will be sorted by start time asending with created at ascending being a secondary if there are two of the same start times
    weight       Int?                   @default(0)
}

model Tag {
    id           String        @id @default(cuid())
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    createdBy    User          @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById  String
    title        String
    contact      Contact[]
    workspace    Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId  String
    appointments Appointment[]
    deleted      Boolean?      @default(false)
    deletedAt    DateTime?
}

model ContactMeta {
    id               String    @id @default(cuid())
    createdAt        DateTime  @default(now())
    updatedAt        DateTime  @updatedAt
    isPrimaryContact Boolean   @default(false)
    contact          Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)
    contactId        String
    social           Json?
    email            String?
    phoneNumber      String?
    firstName        String?
    lastName         String?
    deleted          Boolean?  @default(false)
    deletedAt        DateTime?
}

model Contact {
    id               String                 @id @default(cuid())
    createdAt        DateTime               @default(now())
    updatedAt        DateTime               @updatedAt
    displayName      String
    notes            String?
    createdBy        User                   @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById      String
    contactMeta      ContactMeta[]
    workspace        Workspace              @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId      String
    tags             Tag[]
    appointmentsMeta ContactOnAppointment[]
    profiles         Profile[]
    referredBy       ReferralConnection?
    deleted          Boolean?               @default(false)
    deletedAt        DateTime?
}

model ReferralConnection {
    id           String    @id @default(cuid())
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
    contactId    String    @unique
    contact      Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)
    referalNotes String?
    deleted      Boolean?  @default(false)
    deletedAt    DateTime?
}

model UserOnWorkspace {
    id                   String        @id @default(cuid())
    createdAt            DateTime      @default(now())
    updatedAt            DateTime      @updatedAt
    role                 ROLE          @default(USER)
    workspace            Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId          String
    user                 User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId               String
    assignedAppointments Appointment[]
    locked               Boolean       @default(false)

    @@unique([userId, workspaceId])
}

model Workspace {
    id               String                   @id @default(cuid())
    title            String                   @default("Untitled Workspace")
    createdAt        DateTime                 @default(now())
    updatedAt        DateTime                 @updatedAt
    usersOnWorkspace UserOnWorkspace[]
    contacts         Contact[]
    tags             Tag[]
    appointments     Appointment[]
    subscription     SubscriptionOnWorkspace?
    profiles         Profile[]
}

model SubscriptionOnWorkspace {
    id                   String            @id @default(cuid())
    createdAt            DateTime          @default(now())
    updatedAt            DateTime          @updatedAt
    stripeSubscriptionId String
    isActive             Boolean           @default(false)
    type                 SUBSCRIPTION_TYPE @default(INDIVIDUAL)
    ownerId              String
    owner                User              @relation(fields: [ownerId], references: [id])
    workspaceId          String            @unique
    workspace            Workspace         @relation(fields: [workspaceId], references: [id])
    seats                Int               @default(1) // More than one seat requires a Team or Brokerage Subsription
}

///// Next Auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    refresh_token     String?
    access_token      String?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id                    String                    @id @default(cuid())
    createdAt             DateTime                  @default(now())
    accounts              Account[]
    sessions              Session[]
    profiles              Profile[]
    isRegistered          Boolean                   @default(false)
    subscriptions         SubscriptionOnWorkspace[]
    workspaceMeta         UserOnWorkspace[]
    contact               Contact[]
    tags                  Tag[]
    appointments          Appointment[]
    notifications         Notification[]
    defaultWorkspace      String?
    name                  String?
    brokerage             String?
    email                 String?                   @unique
    emailVerified         DateTime?
    image                 String?
    stripeCustomerId      String?                   @unique
    contactOnAppointments ContactOnAppointment[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum ContactOnAppointmentRole {
    CLIENT
    AGENT
    CONTRACTOR
    INSPECTOR
    OTHER
}

enum ROLE {
    WORKSPACE_OWNER
    ADMIN
    USER
}

enum SUBSCRIPTION_TYPE {
    INDIVIDUAL
    TEAM
    BROKERAGE
}

enum AppointmentStatus {
    NO_STATUS
    CONFIRMED
    CANCELED
    RESCHEDULED
    PENDING
    DENIED
}

enum PROFILE_TYPES {
    BUYER
    SELLER
    RENTER
    RENTEE
    AGENT
    VENDOR
    OTHER
}
