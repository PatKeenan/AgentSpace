// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    url      = env("DATABASE_URL")
}

model Notification {
    id        String    @id @default(cuid())
    createdAt DateTime  @default(now())
    message   String
    userId    String
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    viewd     Boolean?  @default(false)
    viewedOn  DateTime?
    deleted   Boolean?  @default(false)
    deletedAt DateTime?
}

model ContactOnShowing {
    id        String              @id @default(cuid())
    contact   Contact              @relation(fields: [contactId], references: [id], onDelete: Cascade)
    contactId String
    role      ContactOnShowingRole
    showing   Showing             @relation(fields: [showingId], references: [id], onDelete: Cascade)
    showingId String
    deleted   Boolean?            @default(false)
    deletedAt DateTime?
}

model Showing {
    id           String            @id @default(cuid())
    createdAt    DateTime          @default(now())
    updatedAt    DateTime          @default(now())
    workspace    Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId  String
    createdBy    User              @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById  String
    date         String
    status       ShowingStatus     @default(NO_STATUS)
    startTime    String?
    endTime      String?
    tags         Tag[]
    contacts     ContactOnShowing[]
    address      String
    latitude     Float
    longitude    Float
    note         String?
    assignedTo   UserOnWorkspace?  @relation(fields: [assignedToId], references: [id])
    assignedToId String?
    deleted      Boolean?          @default(false)
    deletedAt    DateTime?
    // If user decideds to reorder to the showings in a list. Default will be sorted by start time asending with created at ascending being a secondary if there are two of the same start times
    weight       Int? @default(0)
}

model Tag {
    id          String    @id @default(cuid())
    createdAt   DateTime  @default(now())
    createdBy   User      @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById String
    title       String
    contact     Contact[]
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId String
    showings    Showing[]
    deleted     Boolean?  @default(false)
    deletedAt   DateTime?
}
model ContactMeta {
    id               String    @id @default(cuid())
    isPrimaryContact Boolean   @default(false)
    contact          Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)
    contactId        String   
    social           Json?
    email            String?
    phoneNumber      String?
    firstName        String?
    lastName         String?
    deleted          Boolean?  @default(false)
    deletedAt        DateTime?
}

model Contact {
    id           String              @id @default(cuid())
    createdAt    DateTime            @default(now())
    displayName  String
    notes        String?
    createdBy    User                @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById  String
    contactMeta  ContactMeta[]
    workspace    Workspace           @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId  String
    tags         Tag[]
    showingsMeta ContactOnShowing[] 
    referredBy   ReferralConnection?
    deleted      Boolean?            @default(false)
    deletedAt    DateTime?
}

model ReferralConnection {
    id           String    @id @default(cuid())
    contactId     String    @unique
    contact       Contact    @relation(fields: [contactId], references: [id], onDelete: Cascade)
    referalNotes String?
    deleted      Boolean?  @default(false)
    deletedAt    DateTime?
}

model UserOnWorkspace {
    id               String    @id @default(cuid())
    role             ROLE      @default(USER)
    workspace        Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId      String
    user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId           String
    assignedShowings Showing[]
    locked           Boolean   @default(false)

    @@unique([userId, workspaceId])
}

model Workspace {
    id               String                   @id @default(cuid())
    title            String                   @default("Untitled Workspace")
    createdAt        DateTime                 @default(now())
    usersOnWorkspace UserOnWorkspace[]
    contacts         Contact[]
    tags             Tag[]
    showings         Showing[]
    subscription     SubscriptionOnWorkspace?
}

model SubscriptionOnWorkspace {
    id                   String            @id @default(cuid())
    stripeSubscriptionId String
    isActive             Boolean           @default(false)
    createdAt            DateTime          @default(now())
    type                 SUBSCRIPTION_TYPE @default(INDIVIDUAL)
    ownerId              String
    owner                User              @relation(fields: [ownerId], references: [id])
    workspaceId          String            @unique
    workspace            Workspace         @relation(fields: [workspaceId], references: [id])
    seats                Int               @default(1) // More than one seat requires a Team or Brokerage Subsription
}

///// Next Auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    refresh_token     String?
    access_token      String?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id               String                    @id @default(cuid())
    accounts         Account[]
    sessions         Session[]
    isRegistered     Boolean                   @default(false)
    subscriptions    SubscriptionOnWorkspace[]
    workspaceMeta    UserOnWorkspace[]
    contact          Contact[]
    tags             Tag[]
    showings         Showing[]
    notifications    Notification[]
    defaultWorkspace String?
    name             String?
    brokerage        String?
    email            String?                   @unique
    emailVerified    DateTime?
    image            String?
    stripeCustomerId String?                   @unique
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum ContactOnShowingRole {
    CLIENT
    AGENT
    OTHER
}

enum ROLE {
    WORKSPACE_OWNER
    ADMIN
    USER
}

enum SUBSCRIPTION_TYPE {
    INDIVIDUAL
    TEAM
    BROKERAGE
}

enum ShowingStatus {
    NO_STATUS
    CONFIRMED
    CANCELED
    RESCHEDULED
    PENDING
    DENIED
}
